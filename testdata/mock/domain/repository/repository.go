// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	date "github.com/sobadon/anrd/domain/model/date"
	program "github.com/sobadon/anrd/domain/model/program"
	recorder "github.com/sobadon/anrd/domain/model/recorder"
)

// MockStation is a mock of Station interface.
type MockStation struct {
	ctrl     *gomock.Controller
	recorder *MockStationMockRecorder
}

// MockStationMockRecorder is the mock recorder for MockStation.
type MockStationMockRecorder struct {
	mock *MockStation
}

// NewMockStation creates a new mock instance.
func NewMockStation(ctrl *gomock.Controller) *MockStation {
	mock := &MockStation{ctrl: ctrl}
	mock.recorder = &MockStationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStation) EXPECT() *MockStationMockRecorder {
	return m.recorder
}

// GetPrograms mocks base method.
func (m *MockStation) GetPrograms(ctx context.Context, date date.Date) ([]program.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrograms", ctx, date)
	ret0, _ := ret[0].([]program.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrograms indicates an expected call of GetPrograms.
func (mr *MockStationMockRecorder) GetPrograms(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrograms", reflect.TypeOf((*MockStation)(nil).GetPrograms), ctx, date)
}

// Rec mocks base method.
func (m *MockStation) Rec(ctx context.Context, config recorder.Config, targetPgram program.Program) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rec", ctx, config, targetPgram)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rec indicates an expected call of Rec.
func (mr *MockStationMockRecorder) Rec(ctx, config, targetPgram interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rec", reflect.TypeOf((*MockStation)(nil).Rec), ctx, config, targetPgram)
}

// MockProgramPersistence is a mock of ProgramPersistence interface.
type MockProgramPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockProgramPersistenceMockRecorder
}

// MockProgramPersistenceMockRecorder is the mock recorder for MockProgramPersistence.
type MockProgramPersistenceMockRecorder struct {
	mock *MockProgramPersistence
}

// NewMockProgramPersistence creates a new mock instance.
func NewMockProgramPersistence(ctrl *gomock.Controller) *MockProgramPersistence {
	mock := &MockProgramPersistence{ctrl: ctrl}
	mock.recorder = &MockProgramPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgramPersistence) EXPECT() *MockProgramPersistenceMockRecorder {
	return m.recorder
}

// ChangeStatus mocks base method.
func (m *MockProgramPersistence) ChangeStatus(ctx context.Context, pgram program.Program, newStatus program.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", ctx, pgram, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockProgramPersistenceMockRecorder) ChangeStatus(ctx, pgram, newStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockProgramPersistence)(nil).ChangeStatus), ctx, pgram, newStatus)
}

// LoadBroadcastStartIn mocks base method.
func (m *MockProgramPersistence) LoadBroadcastStartIn(ctx context.Context, now time.Time, duration time.Duration) ([]program.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBroadcastStartIn", ctx, now, duration)
	ret0, _ := ret[0].([]program.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadBroadcastStartIn indicates an expected call of LoadBroadcastStartIn.
func (mr *MockProgramPersistenceMockRecorder) LoadBroadcastStartIn(ctx, now, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBroadcastStartIn", reflect.TypeOf((*MockProgramPersistence)(nil).LoadBroadcastStartIn), ctx, now, duration)
}

// LoadOndemandScheduled mocks base method.
func (m *MockProgramPersistence) LoadOndemandScheduled(ctx context.Context, limit int) (*[]program.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOndemandScheduled", ctx, limit)
	ret0, _ := ret[0].(*[]program.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadOndemandScheduled indicates an expected call of LoadOndemandScheduled.
func (mr *MockProgramPersistenceMockRecorder) LoadOndemandScheduled(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOndemandScheduled", reflect.TypeOf((*MockProgramPersistence)(nil).LoadOndemandScheduled), ctx, limit)
}

// Save mocks base method.
func (m *MockProgramPersistence) Save(ctx context.Context, pgram program.Program) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, pgram)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProgramPersistenceMockRecorder) Save(ctx, pgram interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProgramPersistence)(nil).Save), ctx, pgram)
}
